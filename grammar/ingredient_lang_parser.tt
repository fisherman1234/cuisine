grammar IngredientLang
  rule value
     approximateur amount quantifieur descripteur_fac unit approximateur descripteur ingredient extra_infos
     /
     unit descripteur amount space ingredient extra_infos
     /
     amount_fig descripteur amount_fig quantifieur ingredient extra_infos
     /
     ingredient ':' space amount unit
     /
     amount quantifieur ingredient extra_infos
     /
     descripteur ingredient extra_infos
     /
     ingredient extra_infos
     /
     unit 'de' space ingredient space extra_ifos
     /
     approximateur amount quantifieur descripteur_fac unit approximateur ingredient extra_infos
     /
     amount space descripteur ingredient extra_infos
     /
     amount space descripteur amount_fig unit descripteur ingredient extra_infos
     /
     'le ' unit descripteur amount_fig quantifieur ingredient extra_infos
     /
     amount unit descripteur unit descripteur ingredient extra_infos
     /
     combined_unit descripteur ingredient extra_infos

  end

  rule amount_fig
    'quelques' / 'un peu' / '1 peu' / 'beaucoup' / '1 demi' / 'un demi' / 'un quart' / 'un 1_2' / 'une' / 'un' /  'deux' / 'trois' / 'quatre' / 'cinq' / 'six' / 'sept' / 'huit' / 'neuf' / 'dix' / [0-9_,]*
  end

  rule amount
     amount_fig ' a ' amount_fig / amount_fig ' ou ' amount_fig / amount_fig '-' amount_fig / amount_fig
  end

  rule combined_unit
    amount quantifieur unit quantifieur descripteur amount unit
  end

  rule approximateur_el
    'moyenne' / 'bombee'
  end

  rule approximateur
    ' '* 'environ' ' '* / ' '* approximateur_el 's' ' '* / ' '* approximateur_el ' '*  / ''
  end

  rule descripteur
    'd\'' / 'du ' / 'de la ' / 'de l\'' / 'des ' / 'de '
  end

  rule descripteur_fac
    descripteur / ''
  end

  rule unit_item
    'kg' / 'queue' / 'dizaine' / 'quinzaine' / 'assiettes creuse' / 'assiette creuse' / 'assiettes plate' / 'assiette plate' /  'assiette' / 'pincee' / 'feuille'  / 'tranchette' / 'tranche'  / 'cerneaux' / 'cerneau' / 'jus' / 'tablette' / 'boite de conserve' / 'copeaux' / 'copeau'  / 'pied' / 'pave' / 'barquette' / 'cl'  / 'gousse' / 'bouquet'  / 'sachet' / 'escalope'  / 'poignee'  / 'boule' / 'jaune'  / 'blanc' / 'goutte' / 'ml' / 'morceaux' / 'morceau' / 'verre' / 'peu' / 'cube' / 'botte' / 'brin' / 'branche' / 'bocal' / 'litre'  / 'volume' / 'grappe' / 'boite' / 'baton' / 'etoile' / 'pot' / 'barre'  / 'sachet' / 'rondelle' / 'darne' / 'briquette' / 'brique' / 'paquet' / 'eclat' / 'baguette' / 'kilos' / 'ailerons' / 'verre a moutarde' / 'buchette'/ 'tasse'  / 'rable' / 'de' / 'carre'  / 'pointe' / 'livre' / 'trait' / 'portion' / 'flacon' / 'rouleau' / 'rondelle' / 'plaque' / 'buche' / 'bte' /  'bol' / 'cm' / 'dl' / 'tete' / cuillere_family  / 'g' / 'l'
  end

  rule cuillere_family
    cuillere_word ' a ' cuillere_contenant /  cuillere_word
  end

  rule cuillere_word
    'demi-tasse' / 'demi tasse' / 'tasse' / 'cuillerees' / 'cuilleree' / 'cuilleres' / 'cuillere' / 'c'
  end

  rule cuillere_contenant
    'dessert' / 'soupe' / 'cafe' / 's'
  end

  rule unit
    ' '* unit_item 's ' / ' '* unit_item ' '
  end

  rule quant
    'belle' / 'bel' / 'grosse' / 'gros' / 'petite' / 'petit'  / 'grande' / 'grand' / 'beaux' / 'beau' / 'fine' / 'fin' / 'jeune' / 'peu' / 'moyenne'
  end

  rule quantifieur
    ' '* quant 's ' / ' '* quant ' ' / ' '*
  end

  rule space
    ' '+
  end

  rule extra_infos
    (.)*
  end

  rule ingredient
    ingredient_three_words / ingredient_two_words / ingredient_one_word
  end

  rule ingredient_three_words
     three_words &{ |s|
                      name = s[0].text_value.to_s.singularize.gsub(/-/, ' ')
                      rxp = Regexp.new("^(#{Ingredient.all.collect{|l| l.name}.join('|')})$")
                      !name.match(rxp).nil?
                      }
  end

  rule ingredient_two_words
    two_words &{ |s|
                  name = s[0].text_value.to_s.singularize.gsub(/-/, ' ')
                  rxp = Regexp.new("^(#{Ingredient.all.collect{|l| l.name}.join('|')})$")
                  !name.match(rxp).nil?
                  }
  end

  rule ingredient_one_word
      word &{ |s|
                    name = s[0].text_value.to_s.singularize.gsub(/-/, ' ')
                    rxp = Regexp.new("^(#{Ingredient.all.collect{|l| l.name}.join('|')})$")
                    !name.match(rxp).nil?
                    }
  end

  rule three_words
    (word space word space word)
  end

  rule two_words
    (word space word)
  end

  rule word
    ([a-zA-Z]+)
  end

  rule ingredient_word
    three_words / two_words / word
  end
end